#!/usr/bin/python3
import sys
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QSlider, QLabel, QPushButton, QFileDialog, QDialog, QHBoxLayout, QGridLayout, QComboBox, QLineEdit, QScrollArea, QTableWidget, QTableWidgetItem, QFrame, QCheckBox
from PyQt5.QtCore import Qt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas

class SinewaveApp(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Sine Wave with Frequency and Amplitude Sliders")
        self.setGeometry(100, 100, 800, 600)

        self.central_widget = QWidget(self)
        self.setCentralWidget(self.central_widget)

        self.layout = QHBoxLayout(self.central_widget)

        self.create_widgets()
        self.setup_plot()

    def create_widgets(self):
        self.figure, self.ax = plt.subplots()
        self.canvas = FigureCanvas(self.figure)

        ##################### Create Table #####################
        self.cv_result_table = QtWidgets.QTableView()
        data = pd.DataFrame([
          [1, 9, 2],
          [1, 0, -1],
          [3, 5, 2],
          [3, 3, 2],
          [5, 8, 9],
        ], columns = ['A', 'B', 'C'])

        self.model = TableModel(data)
        self.cv_result_table.setModel(self.model)
        ########################################################
            
        self.cvaddopenbutton = QPushButton("Add/Open CV file", self)
        self.cvloadbutton = QPushButton("Load CV file", self)
        self.cvchoosecombo = QComboBox(self)
        self.cvchoosecombo.setGeometry(100, 80, 120, 30)
        self.cvchoosecombo.addItems(["Option 1", "Option 2", "Option 3"])
        self.cvchoosecombo.setEditable(True)
        self.cvchoosecombo.setInsertPolicy(QComboBox.NoInsert)
        self.cvdeletebutton = QPushButton("Delete CV", self)
        
        self.ircompenlabel = QLabel("IR compensation (ohm):")
        self.ircompenbox = QLineEdit(self)
        self.elec_arealabel = QLabel("Electrode area (cm<sup>2</sup>):")
        self.elec_areabox = QLineEdit(self)
        self.scan_rate_label = QLabel("Scan rate (V/s):")
        self.scan_rate_box = QLineEdit(self)
        
        self.cv_trim_start = QLabel("Trim start:")
        self.cv_trim_end = QLabel("Trim end:")
        self.cv_baseline_1_start = QLabel("Start 1:")
        self.cv_baseline_1_end = QLabel("End 1:")
        self.cv_baseline_2_start = QLabel("Start 2:")
        self.cv_baseline_2_end = QLabel("End 2:")
        self.cv_peak_search_range_label = QLabel("Peak search range:")
        self.cv_peak_position_1_label = QLabel("Peak position 1:")
        self.cv_peak_position_2_label = QLabel("Peak position 2:")
        
        self.cv_trim_start_slider = QSlider(Qt.Horizontal, minimum=1, maximum=10, tickInterval=1)
        self.cv_trim_end_slider = QSlider(Qt.Horizontal, minimum=1, maximum=10, tickInterval=1)
        self.cv_baseline_1_start_slider = QSlider(Qt.Horizontal, minimum=1, maximum=10, tickInterval=1)
        self.cv_baseline_1_end_slider = QSlider(Qt.Horizontal, minimum=1, maximum=10, tickInterval=1)
        self.cv_baseline_2_start_slider = QSlider(Qt.Horizontal, minimum=1, maximum=10, tickInterval=1)
        self.cv_baseline_2_end_slider = QSlider(Qt.Horizontal, minimum=1, maximum=10, tickInterval=1)
        self.cv_peak_search_slider = QSlider(Qt.Horizontal, minimum=1, maximum=10, tickInterval=1)
        self.cv_peak_position_1_slider = QSlider(Qt.Horizontal, minimum=1, maximum=10, tickInterval=1)
        self.cv_peak_position_2_slider = QSlider(Qt.Horizontal, minimum=1, maximum=10, tickInterval=1)

        self.cv_position_1_label = QLabel("Position:")
        self.cv_position_2_label = QLabel("Position:")
        self.cv_position_3_label = QLabel("Position:")
        self.cv_position_4_label = QLabel("Position:")
        self.cv_position_5_label = QLabel("Position:")
        self.cv_position_6_label = QLabel("Position:")
        self.cv_position_7_label = QLabel("Position:")
        self.cv_position_8_label = QLabel("Position:")
        self.cv_position_9_label = QLabel("Position:")
        self.cv_position_10_label = QLabel("Position:")
        self.cv_position_11_label = QLabel("Position:")
        self.cv_position_12_label = QLabel("Position:")
        self.cv_position_13_label = QLabel("Position:")
        self.cv_position_14_label = QLabel("Position:")
        
        self.cv_position_trim_start_box = QLineEdit(self)
        self.cv_position_trim_end_box = QLineEdit(self)
        self.cv_position_baseline_1_start_box = QLineEdit(self)
        self.cv_position_baseline_1_end_box = QLineEdit(self)
        self.cv_position_baseline_2_start_box = QLineEdit(self)
        self.cv_position_baseline_2_end_box = QLineEdit(self)
        self.cv_position_search_range_box = QLineEdit(self) 
        self.cv_position_peak_1_box = QLineEdit(self) 
        self.cv_position_peak_2_box = QLineEdit(self) 
 
        self.cv_position_trim_start_box.setFixedSize(80, 30)
        self.cv_position_trim_end_box.setFixedSize(80, 30)
        self.cv_position_baseline_1_start_box.setFixedSize(80, 30)
        self.cv_position_baseline_1_end_box.setFixedSize(80, 30)
        self.cv_position_baseline_2_start_box.setFixedSize(80, 30)
        self.cv_position_baseline_2_end_box.setFixedSize(80, 30)
        self.cv_position_search_range_box.setFixedSize(80, 30)
        self.cv_position_peak_1_box.setFixedSize(80, 30)
        self.cv_position_peak_2_box.setFixedSize(80, 30)

        self.cv_nicholson_frame = QFrame(self)
        self.cv_nicholson_frame.setFrameShape(QFrame.Box)  # Set the frame shape to Box for a rectangular frame
        self.cv_nicholson_frame.setLineWidth(2)  # Set the width of the frame lines
        
        left_layout = QGridLayout()
        self.layout.addLayout(left_layout, stretch=2)
        left_layout.addWidget(self.canvas, 0, 0, 1, 2)
        left_layout.addWidget(self.cv_result_table)

        # Add Nicholson Frame
        right_nicholson_frame = QVBoxLayout(self.cv_nicholson_frame)
        self.nicholson_checkbox = QCheckBox("Nicholson method (if baseline cannot be determine)")
        right_nicholson_frame.addWidget(self.nicholson_checkbox)     
        nicholson_slider_layout = QHBoxLayout()
        right_nicholson_frame.addLayout(nicholson_slider_layout)      
        self.switch_potential_label = QLabel("Switching potential current (jps0)")
        self.label2 = QLabel("Label 2")
        self.nicholson_slider = QSlider(Qt.Horizontal, minimum=1, maximum=10, tickInterval=1)
        nicholson_slider_layout.addWidget(self.switch_potential_label)
        nicholson_slider_layout.addWidget(self.nicholson_slider)
        
        # Create layout for CV right side
        right_layout = QVBoxLayout()
        self.layout.addLayout(right_layout, stretch=1)
        right_1 = QHBoxLayout()
        right_2 = QHBoxLayout()
        right_3 = QHBoxLayout()
        right_4 = QHBoxLayout()
        right_5 = QHBoxLayout()
        right_6 = QHBoxLayout()
        right_7 = QHBoxLayout()
        right_8 = QHBoxLayout()
        right_9 = QHBoxLayout()
        right_10 = QHBoxLayout()
        right_11 = QHBoxLayout()
        right_12 = QHBoxLayout()
        
        right_layout.addLayout(right_1)
        right_layout.addLayout(right_2)
        right_layout.addLayout(right_3)
        right_layout.addLayout(right_4) 
        right_layout.addLayout(right_5) 
        right_layout.addLayout(right_6) 
        right_layout.addLayout(right_7) 
        right_layout.addLayout(right_8)
        right_layout.addLayout(right_9)
        right_layout.addLayout(right_10)
        right_layout.addLayout(right_11)
        right_layout.addLayout(right_12, stretch=1)
        
        right_1.addWidget(self.cvaddopenbutton)
        right_1.addWidget(self.cvloadbutton)
        right_1.addWidget(self.cvchoosecombo)
        right_1.addWidget(self.cvdeletebutton)
        
        right_2.addWidget(self.ircompenlabel)
        right_2.addWidget(self.ircompenbox)
        right_2.addWidget(self.elec_arealabel)
        right_2.addWidget(self.elec_areabox)
        right_2.addWidget(self.scan_rate_label)
        right_2.addWidget(self.scan_rate_box)
        
        right_3.addWidget(self.cv_trim_start)
        right_3.addWidget(self.cv_trim_start_slider)
        right_3.addWidget(self.cv_position_1_label)
        right_3.addWidget(self.cv_position_trim_start_box)
        
        right_4.addWidget(self.cv_trim_end)
        right_4.addWidget(self.cv_trim_end_slider)
        right_4.addWidget(self.cv_position_2_label)
        right_4.addWidget(self.cv_position_trim_end_box)

        right_5.addWidget(self.cv_baseline_1_start)
        right_5.addWidget(self.cv_baseline_1_start_slider)
        right_5.addWidget(self.cv_position_3_label)
        right_5.addWidget(self.cv_position_baseline_1_start_box)
        
        right_6.addWidget(self.cv_baseline_1_end)
        right_6.addWidget(self.cv_baseline_1_end_slider)  
        right_6.addWidget(self.cv_position_4_label)
        right_6.addWidget(self.cv_position_baseline_1_end_box)
        
        right_7.addWidget(self.cv_baseline_2_start)
        right_7.addWidget(self.cv_baseline_2_start_slider)
        right_7.addWidget(self.cv_position_5_label)
        right_7.addWidget(self.cv_position_baseline_2_start_box)
        
        right_8.addWidget(self.cv_baseline_2_end)
        right_8.addWidget(self.cv_baseline_2_end_slider)    
        right_8.addWidget(self.cv_position_6_label)
        right_8.addWidget(self.cv_position_baseline_2_end_box)
        
        right_9.addWidget(self.cv_peak_search_range_label)
        right_9.addWidget(self.cv_peak_search_slider)
        right_9.addWidget(self.cv_position_7_label)
        right_9.addWidget(self.cv_position_search_range_box)
        
        right_10.addWidget(self.cv_peak_position_1_label)
        right_10.addWidget(self.cv_peak_position_1_slider)
        right_10.addWidget(self.cv_position_8_label)
        right_10.addWidget(self.cv_position_peak_1_box)   
        
        right_11.addWidget(self.cv_peak_position_2_label)
        right_11.addWidget(self.cv_peak_position_2_slider)
        right_11.addWidget(self.cv_position_9_label)
        right_11.addWidget(self.cv_position_peak_2_box) 

        right_12.addWidget(self.cv_nicholson_frame)
     
        right_layout.setAlignment(Qt.AlignTop)   

        # self.cvopenbutton.clicked.connect(self.show_hello_window)
        # Connect sliders to plot update
        # self.freq_slider.valueChanged.connect(self.cv_update_plot)
        # self.amp_slider.valueChanged.connect(self.cv_update_plot)

    def setup_plot(self):
        self.x = np.linspace(0, 2 * np.pi, 1000)
        self.freq = 1 # Initial frequency
        self.amp = 1 # Initial amplitude

        y = self.amp * np.sin(self.freq * self.x)
        self.line, = self.ax.plot(self.x, y, label='Sine Wave')
        self.ax.legend()
        self.ax.set_xlabel('Time')
        self.ax.set_ylabel('Amplitude')
        self.canvas.draw()

    def cv_update_plot(self):
        frequency = self.freq_slider.value()
        amplitude = self.amp_slider.value()
        y = amplitude * np.sin(frequency * self.x)
        self.line.set_ydata(y)
        self.canvas.draw()

    def show_hello_window(self):
        hello_dialog = helloDialog(self)
        hello_dialog.exec_()

class helloDialog(QDialog):
    def __init__(self, parent):
        super().__init__(parent)
        self.setWindowTitle("hello")
        self.setGeometry(200, 200, 300, 150)
        layout = QVBoxLayout()
        label = QLabel("Say Hello", self)
        layout.addWidget(label)
        self.setLayout(layout)
        
class TableModel(QtCore.QAbstractTableModel):
    # https://www.pythonguis.com/tutorials/qtableview-modelviews-numpy-pandas/
    def __init__(self, data):
        super(TableModel, self).__init__()
        self._data = data
    def data(self, index, role):
        if role == Qt.DisplayRole:
            value = self._data.iloc[index.row(), index.column()]
            return str(value)
    def rowCount(self, index):
        return self._data.shape[0]
    def columnCount(self, index):
        return self._data.shape[1]
    def headerData(self, section, orientation, role):
        # section is the index of the column/row.
        if role == Qt.DisplayRole:
            if orientation == Qt.Horizontal:
                return str(self._data.columns[section])
            if orientation == Qt.Vertical:
                return str(self._data.index[section])

if __name__ == '__main__':
    app = QApplication(sys.argv)
    mainWin = SinewaveApp()
    mainWin.show()
    sys.exit(app.exec_())