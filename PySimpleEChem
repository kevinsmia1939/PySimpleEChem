#!/usr/bin/python3
import sys
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import pyqtgraph as pg
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QSlider, QLabel, QPushButton, QFileDialog, QDialog, QHBoxLayout, QGridLayout, QComboBox, QLineEdit, QScrollArea, QTableWidget, QTableWidgetItem, QFrame, QCheckBox, QMenu, QAction, QSplitter
from PyQt5.QtCore import Qt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from function_collection import battery_xls2df, get_CV_init, cy_idx_state_range, read_cv_format, get_peak_CV, search_pattern, ir_compen_func, diffusion, reaction_rate, peak_2nd_deriv, find_alpha, min_max_peak, check_val, switch_val, RDE_kou_lev, linear_fit, data_poly_inter,open_battery_data, df_select_column, read_cv_versastat
from superqt import QRangeSlider
# from numba import jit

# @jit

class PySimpleEChem_main(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("PySimpleEChem")
        self.setGeometry(100, 100, 800, 600)

        self.central_widget = QWidget(self)
        self.setCentralWidget(self.central_widget)

        self.layout = QVBoxLayout(self.central_widget) # Use QVBoxLayout for vertical arrangement

        self.create_widgets()
        self.cv_setup_plot()

    def create_widgets(self):
        
        self.cv_concat_list_df = pd.DataFrame()
        self.cv_concat_list_df_copy = pd.DataFrame()
        self.cv_param_concat_df = pd.DataFrame()
        self.cv_2nd_deriv_concat_list_df = pd.DataFrame()
        self.cv_baseline_df = pd.DataFrame()
        self.cv_lines = None
        self.cv_plot_baseline_1 = None
        self.cv_plot_baseline_2 = None
        self.cv_plot_baseline_fit_1 = None
        self.cv_plot_baseline_fit_2 = None
        self.cv_plot_peak_1 = None
        self.cv_plot_peak_2 = None
        self.cv_plot_range_1 = None
        self.cv_plot_range_2 = None     
        self.cv_chosen_volt = None
        self.cv_chosen_current = None
        self.cv_peak_range = None
        self.cv_peak_pos_1_value = None
        self.cv_peak_pos_2_value = None
        self.cv_line_artist_list = []
        self.cv_plot_defl = None
        self.baseline_start_1 = None
        self.baseline_start_2 = None
        self.baseline_end_1 = None
        self.baseline_end_2 = None
        
        # Top section (horizontal)
        top_layout = QHBoxLayout()
    
        # Top left section (vertical)
        top_left_layout = QVBoxLayout()
        self.cv_plot = pg.PlotWidget()
        top_left_layout.addWidget(self.cv_plot)  
        
        
        top_right_layout = QVBoxLayout() # Top right section (vertical)   
        top_right_cv_open = QHBoxLayout() #First top-right CV layout

        self.cvaddopenbutton = QPushButton("Add/Open CV file", self)
        self.cvaddopenbutton.setMenu(self.create_cv_menu())
        self.cvloadbutton = QPushButton("Load CV file", self)
        self.cvchoosecombo = QComboBox(self)
        self.cvchoosecombo.setFixedSize(300, 35)
        self.cvchoosecombo.setEditable(False)
        self.cvchoosecombo.setInsertPolicy(QComboBox.NoInsert)
        self.cvdeletebutton = QPushButton("Delete CV", self)
        top_right_cv_open.addWidget(self.cvaddopenbutton)
        top_right_cv_open.addWidget(self.cvloadbutton)
        top_right_cv_open.addWidget(self.cvchoosecombo)
        top_right_cv_open.addWidget(self.cvdeletebutton)
        top_right_layout.addLayout(top_right_cv_open)
  
        # Create a vertical layout for the top right section
        top_right_IR = QHBoxLayout()
        self.ircompenlabel = QLabel("IR compensation (ohm):")
        self.cv_ircompen_box = QLineEdit(self)
        self.elec_arealabel = QLabel("Electrode area (cm<sup>2</sup>):")
        self.cv_elec_area_box = QLineEdit(self)
        self.scan_rate_label = QLabel("Scan rate (V/s):")
        self.cv_scan_rate_box = QLineEdit(self)
        top_right_IR.addWidget(self.ircompenlabel)
        top_right_IR.addWidget(self.cv_ircompen_box)
        top_right_IR.addWidget(self.elec_arealabel)
        top_right_IR.addWidget(self.cv_elec_area_box)
        top_right_IR.addWidget(self.scan_rate_label)
        top_right_IR.addWidget(self.cv_scan_rate_box)   
        top_right_layout.addLayout(top_right_IR)
               
        top_right_trim = QHBoxLayout()
        self.cv_trim_label = QLabel("Trim:")
        self.cv_trim_slider = QRangeSlider(Qt.Horizontal)
        self.cv_trim_slider.setRange(0, 1)
        self.cv_trim_slider.setValue((0, 1))
        self.cv_pos_trim_label = QLabel("Position:")
        self.cv_pos_trim_start_box = QLineEdit(self)
        self.cv_pos_trim_start_box.setFixedSize(50, 30)
        self.cv_pos_trim_end_box = QLineEdit(self)
        self.cv_pos_trim_end_box.setFixedSize(50, 30)      
        top_right_trim.addWidget(self.cv_trim_label)
        top_right_trim.addWidget(self.cv_trim_slider)
        top_right_trim.addWidget(self.cv_pos_trim_label)
        top_right_trim.addWidget(self.cv_pos_trim_start_box)
        top_right_trim.addWidget(self.cv_pos_trim_end_box)     
        top_right_layout.addLayout(top_right_trim)
        
        top_right_baseline_1 = QHBoxLayout()
        self.cv_baseline_1_label = QLabel("Baseline 1:")     
        self.cv_baseline_1_slider = QRangeSlider(Qt.Horizontal)
        self.cv_baseline_1_slider.setRange(0, 1)
        self.cv_baseline_1_slider.setValue((0, 1))
        self.cv_baseline_1_slider.barMovesAllHandles = True   
        self.cv_baseline_1_pos_label = QLabel("Position:")
        self.cv_pos_baseline_start_1_box = QLineEdit(self)
        self.cv_pos_baseline_start_1_box.setFixedSize(50, 30)
        self.cv_pos_baseline_end_1_box = QLineEdit(self)
        self.cv_pos_baseline_end_1_box.setFixedSize(50, 30)
        top_right_baseline_1.addWidget(self.cv_baseline_1_label)
        top_right_baseline_1.addWidget(self.cv_baseline_1_slider)
        top_right_baseline_1.addWidget(self.cv_baseline_1_pos_label)
        top_right_baseline_1.addWidget(self.cv_pos_baseline_start_1_box)
        top_right_baseline_1.addWidget(self.cv_pos_baseline_end_1_box)     
        top_right_layout.addLayout(top_right_baseline_1)
        
        top_right_baseline_2 = QHBoxLayout()
        self.cv_baseline_2_label = QLabel("Baseline 2:")     
        self.cv_baseline_2_slider = QRangeSlider(Qt.Horizontal)
        self.cv_baseline_2_slider.setRange(0, 1)
        self.cv_baseline_2_slider.setValue((0, 1))
        self.cv_baseline_2_slider.barMovesAllHandles = True   
        self.cv_baseline_2_pos_label = QLabel("Position:")
        self.cv_pos_baseline_start_2_box = QLineEdit(self)
        self.cv_pos_baseline_start_2_box.setFixedSize(50, 30)
        self.cv_pos_baseline_end_2_box = QLineEdit(self)
        self.cv_pos_baseline_end_2_box.setFixedSize(50, 30)
        top_right_baseline_2.addWidget(self.cv_baseline_2_label)
        top_right_baseline_2.addWidget(self.cv_baseline_2_slider)
        top_right_baseline_2.addWidget(self.cv_baseline_2_pos_label)
        top_right_baseline_2.addWidget(self.cv_pos_baseline_start_2_box)
        top_right_baseline_2.addWidget(self.cv_pos_baseline_end_2_box)     
        top_right_layout.addLayout(top_right_baseline_2)
        
        top_right_peak_search = QHBoxLayout()
        self.cv_peak_search_range_label = QLabel("Peak search range:")
        self.cv_peak_range_slider = QSlider(Qt.Horizontal)
        self.cv_pos_search_range_label = QLabel("Range:")
        self.cv_pos_search_range_box = QLineEdit(self) 
        self.cv_pos_search_range_box.setFixedSize(50, 30)
        top_right_peak_search.addWidget(self.cv_peak_search_range_label)
        top_right_peak_search.addWidget(self.cv_peak_range_slider)
        top_right_peak_search.addWidget(self.cv_pos_search_range_label)
        top_right_peak_search.addWidget(self.cv_pos_search_range_box)   
        top_right_layout.addLayout(top_right_peak_search)        
        
        top_right_pos_1 = QHBoxLayout()
        self.cv_peak_pos_1_label = QLabel("Peak position 1:")
        self.cv_peak_pos_1_slider = QSlider(Qt.Horizontal)
        self.cv_peak_pos_mode_1_label = QLabel("Mode:")
        self.cv_peak_pos_combo_1 = QComboBox(self)
        self.cv_peak_pos_combo_1.addItems(['max','min','exact','2nd derivative'])
        self.cv_peak_pos_combo_1.setCurrentText('max')
        self.cv_peak_pos_combo_1.setFixedSize(100, 35)
        self.cv_peak_pos_combo_1.setEditable(False)
        self.cv_peak_pos_combo_1.setInsertPolicy(QComboBox.NoInsert)
        self.cv_peak_pos_1_val_label = QLabel("Position:")
        self.cv_peak_pos_1_box = QLineEdit(self) 
        self.cv_peak_pos_1_box.setFixedSize(50, 30)
        top_right_pos_1.addWidget(self.cv_peak_pos_1_label)
        top_right_pos_1.addWidget(self.cv_peak_pos_1_slider)
        top_right_pos_1.addWidget(self.cv_peak_pos_mode_1_label)
        top_right_pos_1.addWidget(self.cv_peak_pos_combo_1)   
        top_right_pos_1.addWidget(self.cv_peak_pos_1_val_label) 
        top_right_pos_1.addWidget(self.cv_peak_pos_1_box) 
        top_right_layout.addLayout(top_right_pos_1)        
        
        top_right_pos_2 = QHBoxLayout()
        self.cv_peak_pos_2_label = QLabel("Peak position 2:")
        self.cv_peak_pos_2_slider = QSlider(Qt.Horizontal)
        self.cv_peak_pos_mode_2_label = QLabel("Mode:")
        self.cv_peak_pos_combo_2 = QComboBox(self)
        self.cv_peak_pos_combo_2.addItems(['max','min','exact','2nd derivative'])
        self.cv_peak_pos_combo_2.setCurrentText('min')
        self.cv_peak_pos_combo_2.setFixedSize(100, 35)
        self.cv_peak_pos_combo_2.setEditable(False)
        self.cv_peak_pos_combo_2.setInsertPolicy(QComboBox.NoInsert)
        self.cv_peak_pos_2_val_label = QLabel("Position:")
        self.cv_peak_pos_2_box = QLineEdit(self) 
        self.cv_peak_pos_2_box.setFixedSize(50, 30)
        top_right_pos_2.addWidget(self.cv_peak_pos_2_label)
        top_right_pos_2.addWidget(self.cv_peak_pos_2_slider)
        top_right_pos_2.addWidget(self.cv_peak_pos_mode_2_label)
        top_right_pos_2.addWidget(self.cv_peak_pos_combo_2)   
        top_right_pos_2.addWidget(self.cv_peak_pos_2_val_label) 
        top_right_pos_2.addWidget(self.cv_peak_pos_2_box) 
        top_right_layout.addLayout(top_right_pos_2) 

        # Add Nicholson Frame
        self.nicholson_position_box = QLineEdit(self) 
        self.nicholson_position_box.setFixedSize(50, 30)
        self.cv_nicholson_frame = QFrame(self)
        self.cv_nicholson_frame.setFrameShape(QFrame.Box) # Set the frame shape to Box for a rectangular frame
        self.cv_nicholson_frame.setLineWidth(1) # Set the width of the frame lines    
        right_nicholson_frame = QVBoxLayout(self.cv_nicholson_frame)
        cv_nicholson_slider_layout = QHBoxLayout()
        self.nicholson_checkbox = QCheckBox("Nicholson method (if baseline cannot be determine)")
        self.switch_potential_label = QLabel("Switching potential current (Jps0)")
        self.nicholson_slider = QSlider(Qt.Horizontal, minimum=1, maximum=10, tickInterval=1)
        self.nicholson_position_label = QLabel("Position:")
        right_nicholson_frame.addWidget(self.nicholson_checkbox)     
        right_nicholson_frame.addLayout(cv_nicholson_slider_layout)              
        cv_nicholson_slider_layout.addWidget(self.switch_potential_label)
        cv_nicholson_slider_layout.addWidget(self.nicholson_slider)
        cv_nicholson_slider_layout.addWidget(self.nicholson_position_label)
        cv_nicholson_slider_layout.addWidget(self.nicholson_position_box)
        top_right_layout.addWidget(self.cv_nicholson_frame)

        self.cv_conc_frame = QFrame(self)
        self.cv_conc_frame.setFrameShape(QFrame.Box) # Set the frame shape to Box for a rectangular frame
        self.cv_conc_frame.setLineWidth(1) # Set the width of the frame lines  
        right_result_frame = QVBoxLayout(self.cv_conc_frame)
        cv_result_layout = QHBoxLayout()
        self.cv_bulk_conc = QLabel("Bulk concentration")
        self.cv_bulk_conc_unit = QLabel("mol/cm<sup>2</sup>")
        right_result_frame.addLayout(cv_result_layout)              
        cv_result_layout.addWidget(self.cv_bulk_conc)
        cv_result_layout.addWidget(self.cv_bulk_conc_unit)
        top_right_layout.addWidget(self.cv_conc_frame)

        # Wrap top left and top right sections in QWidgets and add them to QSplitter
        top_left_widget = QWidget()
        top_left_widget.setLayout(top_left_layout)
        top_right_widget = QWidget()
        top_right_widget.setLayout(top_right_layout)
    
        # Wrap top layout in a QSplitter to make it adjustable
        top_splitter = QSplitter(Qt.Horizontal)
        top_splitter.addWidget(top_left_widget)
        top_splitter.addWidget(top_right_widget)
    
        # Add top splitter to main layout
        self.layout.addWidget(top_splitter)
    
        # Bottom section (vertical)
        bottom_layout = QVBoxLayout()

        #################### Create Table #####################
        self.cv_result_table = QtWidgets.QTableView()
        self.cv_result_display = pd.DataFrame()
        self.cv_result_template = pd.DataFrame([
          ['','','','','','','','','','','','']
        ], columns = ['file name', 'scan rate', 'Jp 1', 'Jp 2', 'Jp 1/Jp 2', 'Ep 1', 'Ep 2',"E\u00bd", "ΔE\u209a", "alpha 1", "alpha 2", "Jpc0"])
        self.cv_result_table.setModel(TableModel(self.cv_result_template))
        #######################################################
        
        bottom_layout.addWidget(self.cv_result_table)
        # Add bottom section to main layout
        self.layout.addLayout(bottom_layout)

        self.cv_ircompen_box.textChanged.connect(self.cv_change_param)
        self.cv_elec_area_box.textChanged.connect(self.cv_change_param)
        self.cv_scan_rate_box.textChanged.connect(self.cv_change_param)
        self.cvchoosecombo.textActivated.connect(self.cv_choose_cv)
        # self.cvaddopenbutton.clicked.connect(self.show_hello_window)
        self.cv_trim_slider.sliderMoved.connect(self.cv_draw_all_cv)
        self.cv_baseline_1_slider.sliderMoved.connect(self.cv_draw_baseline_plot)
        self.cv_baseline_2_slider.sliderMoved.connect(self.cv_draw_baseline_plot)
        self.cv_peak_range_slider.sliderMoved.connect(self.cv_draw_marker_plot)
        self.cv_peak_pos_1_slider.sliderMoved.connect(self.cv_draw_marker_plot)
        self.cv_peak_pos_2_slider.sliderMoved.connect(self.cv_draw_marker_plot)
        self.cv_peak_range_slider.sliderMoved.connect(self.cv_draw_marker_plot)
        self.cv_peak_pos_combo_1.currentIndexChanged.connect(self.cv_draw_marker_plot)
        self.cv_peak_pos_combo_2.currentIndexChanged.connect(self.cv_draw_marker_plot)

    def cv_change_param(self):
        self.cv_chosen_ircompen = float(1)
        self.cv_chosen_elec_area = float(1)
        self.cv_chosen_scan_rate = float(0)
        try:
            self.cv_param_concat_df[self.cv_chosen_path].loc['ir_compensation'] = float(self.cv_ircompen_box.text())
            self.cv_chosen_ircompen = self.cv_param_concat_df[self.cv_chosen_path].loc['ir_compensation']
        except ValueError: 
            self.cv_chosen_ircompen = float(1)
        try:
            self.cv_param_concat_df[self.cv_chosen_path].loc['elec_area'] = float(self.cv_elec_area_box.text())
            self.cv_chosen_elec_area = self.cv_param_concat_df[self.cv_chosen_path].loc['elec_area']
        except ValueError: 
            self.cv_chosen_elec_area = float(1)
        try:
            self.cv_param_concat_df[self.cv_chosen_path].loc['scan_rate'] = float(self.cv_scan_rate_box.text())
            self.cv_chosen_scan_rate = self.cv_param_concat_df[self.cv_chosen_path].loc['scan_rate']
        except ValueError: 
            self.cv_chosen_scan_rate = float(0)
            
        self.cv_concat_list_df_copy[self.cv_chosen_path+" volt"] = self.cv_concat_list_df[self.cv_chosen_path+" volt"]+(self.cv_concat_list_df[self.cv_chosen_path+str(" current")]*self.cv_chosen_ircompen)

        self.cv_chosen_volt = np.array(self.cv_concat_list_df_copy[str(self.cv_chosen_path)+' volt'])
        self.cv_chosen_current = np.array(self.cv_concat_list_df_copy[str(self.cv_chosen_path)+' current'])
        self.cv_chosen_volt_reduce = self.cv_chosen_volt[::4]
        self.cv_chosen_current_reduce = self.cv_chosen_current[::4]
        self.cv_draw_all_cv()
        self.cv_draw_baseline_plot()
    
    def cv_setup_plot(self):
        self.cv_plot.setLabel('left', text='Current density')
        self.cv_plot.setLabel('bottom', text='Voltage')

    def create_cv_menu(self):
        cv_addload_menu = QMenu(self)
        cv_par_action = QAction('VersaSTAT(.par)', self)
        cv_par_action.triggered.connect(lambda: self.cv_open_file('.par'))
        cv_cor_action = QAction('CorrWare(.cor)', self)
        cv_cor_action.triggered.connect(lambda: self.cv_open_file('.cor'))
        cv_csv_action = QAction('Comma-separated values(.csv)', self)
        cv_csv_action.triggered.connect(lambda: self.cv_open_file('.csv'))
        cv_txt_action = QAction('Text(.txt)', self)
        cv_txt_action.triggered.connect(lambda: self.cv_open_file('.txt'))
        cv_biologic_action = QAction('Biologic(.txt)', self)
        cv_biologic_action.triggered.connect(lambda: self.cv_open_file('.txt'))
        cv_addload_menu.addAction(cv_par_action)
        cv_addload_menu.addAction(cv_cor_action)
        cv_addload_menu.addAction(cv_csv_action)
        cv_addload_menu.addAction(cv_txt_action)
        cv_addload_menu.addAction(cv_biologic_action)
        return cv_addload_menu

    def cv_open_file(self, cv_file_type):
        if cv_file_type == ".par":
            cv_file_format = "VersaSTAT"
        elif cv_file_type == ".cor":
            cv_file_format = "CorrWare"
        elif cv_file_type == ".csv":
            cv_file_format = "CorrWare"
        elif cv_file_type == ".txt": # TODO
            if self.sender() == self.cv_txt_action:
                cv_file_format = "text"
            elif self.sender() == self.cv_biologic_action:
                cv_file_format = "biologic"
        file_dialog = QFileDialog()
        file_dialog.setNameFilter(f'{cv_file_type} Files (*{cv_file_type})')
        cv_file_path, _ = file_dialog.getOpenFileNames(self, "Open File", "", f'{cv_file_type} Files (*{cv_file_type})')
        if cv_file_path:
            for cv_file in cv_file_path:
                # print(cv_file)
                self.cv_concat_df,self.cv_param_df, self.cv_2nd_deriv_concat_df = read_cv_format(cv_file,cv_file_format)  
    
                self.cv_concat_list_df = pd.concat([self.cv_concat_list_df,self.cv_concat_df],axis=1)
                self.cv_concat_list_df_copy = pd.concat([self.cv_concat_list_df_copy,self.cv_concat_df],axis=1)
                
                self.cv_param_concat_df = pd.concat([self.cv_param_concat_df,self.cv_param_df],axis=1)
                self.cv_2nd_deriv_concat_list_df = pd.concat([self.cv_2nd_deriv_concat_list_df,self.cv_2nd_deriv_concat_df],axis=1)
                # self.cv_result_template = pd.DataFrame([['a', 'b', 'v', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'x']], columns=['file name', 'scan rate', 'Jp 1', 'Jp 2', 'Jp 1/Jp 2', 'Ep 1', 'Ep 2', "E\u00bd", "ΔE\u209a", "alpha 1", "alpha 2", "Jpc0"])
                
                self.cv_result_display = pd.concat([self.cv_result_display,self.cv_result_template],axis=0)
                
                self.cvchoosecombo.clear()
                self.cvchoosecombo.addItems(self.cv_param_concat_df.loc['file_name'].astype(str).tolist()) #Update cv combo box
        
        self.cv_result_display.reset_index(drop=True, inplace=True)
        self.cv_result_table.setModel(TableModel(self.cv_result_display))
        print(self.cv_result_display)
        self.cv_choose_cv()
        self.cv_draw_all_cv()
        self.cv_draw_baseline_plot()

    def cv_draw_all_cv(self):
        #Draw all CV with IR drop
        self.cv_param_concat_df[self.cv_chosen_path].loc['trim_start'] = self.cv_trim_slider.value()[0]
        self.cv_param_concat_df[self.cv_chosen_path].loc['trim_end'] = self.cv_trim_slider.value()[1]

        # Remove all plot when redraw
        if self.cv_line_artist_list is not None:
            for i in self.cv_line_artist_list:
                self.cv_plot.removeItem(i)
            self.cv_line_artist_list = []   
        
        cv_select_trim_start_val = self.cv_param_concat_df[self.cv_chosen_path].loc['trim_start']
        cv_select_trim_end_val = self.cv_param_concat_df[self.cv_chosen_path].loc['trim_end']
        for i in range(int(self.cv_concat_list_df_copy.shape[1]/2)):
            cv_select_trim_start_val = self.cv_param_concat_df.iloc[:,i].loc['trim_start']
            cv_select_trim_end_val = self.cv_param_concat_df.iloc[:,i].loc['trim_end']
            self.cv_lines = self.cv_plot.plot(np.array(self.cv_concat_list_df_copy.iloc[:,i*2])[cv_select_trim_start_val:cv_select_trim_end_val],np.array(self.cv_concat_list_df_copy.iloc[:,(i*2)+1])[cv_select_trim_start_val:cv_select_trim_end_val], width=1.5, pen='white')   
            self.cv_line_artist_list.append(self.cv_lines)
        max_volt = []
        min_volt = []
        max_current = []
        min_current = []
        for column in self.cv_concat_list_df_copy.columns:
            if column.endswith('current'):
                max_current.append(max(self.cv_concat_list_df_copy[column]))
                min_current.append(min(self.cv_concat_list_df_copy[column]))
            if column.endswith('volt'):
                max_volt.append(max(self.cv_concat_list_df_copy[column]))
                min_volt.append(min(self.cv_concat_list_df_copy[column]))
        
        self.cv_plot.setRange(xRange=[min(min_volt), max(max_volt)])
        self.cv_plot.setRange(yRange=[min(min_current), max(max_current)])
        
    def cv_choose_cv(self):
        # Assign variable based on the chosen CV in the combo box
        self.cv_chosen_name = self.cvchoosecombo.currentText()
        self.cv_chosen_idx = self.cvchoosecombo.currentIndex()
        self.cv_chosen_path = self.cv_param_concat_df.columns[self.cv_chosen_idx]
        self.cv_chosen_data_point_num = self.cv_param_concat_df.iloc[:,self.cv_chosen_idx].loc['data_point_num'] #print columns with index
        self.cv_chosen_defl = self.cv_2nd_deriv_concat_list_df[self.cv_chosen_path]
        # Set slider length
        self.cv_trim_slider.setMaximum(self.cv_chosen_data_point_num)
        self.cv_trim_slider.setValue((0,self.cv_chosen_data_point_num))
        
        self.cv_baseline_1_slider.setMaximum(self.cv_chosen_data_point_num-1)
        self.cv_baseline_2_slider.setMaximum(self.cv_chosen_data_point_num-1)
        
        self.cv_baseline_1_slider.setValue((0,self.cv_chosen_data_point_num/10))
        self.cv_baseline_2_slider.setValue((self.cv_chosen_data_point_num/5,self.cv_chosen_data_point_num/10+self.cv_chosen_data_point_num/5))       
        
        self.cv_peak_pos_1_slider.setMaximum(self.cv_chosen_data_point_num-1)
        self.cv_peak_pos_2_slider.setMaximum(self.cv_chosen_data_point_num-1)

        self.cv_param_concat_df[self.cv_chosen_path].loc['baseline_start_1'] = 0
        self.cv_param_concat_df[self.cv_chosen_path].loc['baseline_end_1'] = self.cv_chosen_data_point_num/20
        self.cv_param_concat_df[self.cv_chosen_path].loc['baseline_start_2'] = 0+self.cv_chosen_data_point_num/5
        self.cv_param_concat_df[self.cv_chosen_path].loc['baseline_end_2'] = self.cv_chosen_data_point_num/20+self.cv_chosen_data_point_num/5
        
        self.cv_chosen_volt = np.array(self.cv_concat_list_df_copy[str(self.cv_chosen_path)+' volt'])
        self.cv_chosen_current = np.array(self.cv_concat_list_df_copy[str(self.cv_chosen_path)+' current'])
        
        self.cv_chosen_volt_reduce = self.cv_chosen_volt[::10] #Reduce number of points by 10 times
        self.cv_chosen_current_reduce = self.cv_chosen_current[::10]
        
        if self.baseline_start_1 is not None:
            self.cv_draw_marker_plot()
        
    def cv_draw_baseline_plot(self):
        # if self.cv_chosen_volt is not None and self.cv_chosen_current is not None:   
        self.cv_plot.removeItem(self.cv_plot_baseline_1)
        self.cv_plot_baseline_1 = 0
        self.cv_plot.removeItem(self.cv_plot_baseline_2)
        self.cv_plot_baseline_2 = 1  
  
        self.baseline_start_1 = self.cv_baseline_1_slider.value()[0]
        self.baseline_end_1 = self.cv_baseline_1_slider.value()[1]
        self.baseline_start_2 = self.cv_baseline_2_slider.value()[0]
        self.baseline_end_2 = self.cv_baseline_2_slider.value()[1]


        self.cv_plot_baseline_1 = self.cv_plot.plot(self.cv_chosen_volt[self.baseline_start_1:self.baseline_end_1],self.cv_chosen_current[self.baseline_start_1:self.baseline_end_1],pen=pg.mkPen(color='red', width=4))
        self.cv_plot_baseline_2 = self.cv_plot.plot(self.cv_chosen_volt[self.baseline_start_2:self.baseline_end_2],self.cv_chosen_current[self.baseline_start_2:self.baseline_end_2],pen=pg.mkPen(color='skyblue', width=4))
        self.cv_draw_marker_plot()
        
    def cv_draw_marker_plot(self):
        # print(self.cv_chosen_volt,self.cv_chosen_current,self.cv_peak_range,self.cv_peak_pos_1_value)
        if self.cv_chosen_volt is not None and self.cv_chosen_current is not None:
            self.cv_plot.removeItem(self.cv_plot_baseline_fit_1)
            self.cv_plot_baseline_fit_1 = None
            self.cv_plot.removeItem(self.cv_plot_baseline_fit_2)
            self.cv_plot_baseline_fit_2 = None  
            self.cv_plot.removeItem(self.cv_plot_peak_1)
            self.cv_plot_peak_1 = None              
            self.cv_plot.removeItem(self.cv_plot_peak_2)
            self.cv_plot_peak_2 = None                
            self.cv_plot.removeItem(self.cv_plot_range_1)
            self.cv_plot_range_1 = None
            self.cv_plot.removeItem(self.cv_plot_range_2)
            self.cv_plot_range_2 = None   
            self.cv_plot.removeItem(self.cv_plot_defl)
            self.cv_plot_defl = None  
            
            self.cv_peak_range = self.cv_peak_range_slider.value()
            self.cv_peak_pos_1_value = self.cv_peak_pos_1_slider.value()
            self.cv_peak_pos_2_value = self.cv_peak_pos_2_slider.value()

            # print(self.cv_pos_combo_1.currentText(), self.cv_chosen_volt, self.cv_chosen_current, self.cv_peak_range, self.cv_peak_pos_1_value, self.cv_baseline_1_slider.value())
            self.low_range_1, self.high_range_1, self.cv_peak_volt_1, self.cv_peak_curr_1, jp_1, self.jp_1_poly1d = get_peak_CV(self.cv_peak_pos_combo_1.currentText(), self.cv_chosen_volt, self.cv_chosen_current, self.cv_peak_range, self.cv_peak_pos_1_value, self.cv_baseline_1_slider.value(),self.cv_chosen_defl)
            self.low_range_2, self.high_range_2, self.cv_peak_volt_2, self.cv_peak_curr_2, jp_2, self.jp_2_poly1d = get_peak_CV(self.cv_peak_pos_combo_2.currentText(), self.cv_chosen_volt, self.cv_chosen_current, self.cv_peak_range, self.cv_peak_pos_2_value, self.cv_baseline_2_slider.value(),self.cv_chosen_defl)
            
            if self.cv_peak_pos_combo_1.currentText() == "2nd derivative" or self.cv_peak_pos_combo_2.currentText() == "2nd derivative":
                cv_chosen_defl_nonan = [int(x) for x in self.cv_chosen_defl.dropna().to_numpy()]
                self.cv_plot_defl = self.cv_plot.plot(self.cv_chosen_volt[cv_chosen_defl_nonan],self.cv_chosen_current[cv_chosen_defl_nonan],pen=None,symbol="o", symbolSize=8)
            
            # Flip baseline fitting depending on peak position
            baseline_fit_1 = [self.cv_chosen_volt[self.baseline_start_1],self.cv_chosen_volt[self.baseline_end_1]]
            baseline_fit_1.sort()
            # print(self.cv_peak_volt_1, baseline_fit_1[1],"JJJJJJ")
            if self.cv_peak_volt_1 > baseline_fit_1[1]:
                baseline_fit_1_x1 = baseline_fit_1[0]
                baseline_fit_1_x2 = self.cv_peak_volt_1
            elif self.cv_peak_volt_1 < baseline_fit_1[0]:
                baseline_fit_1_x1 = baseline_fit_1[1]
                baseline_fit_1_x2 = self.cv_peak_volt_1
            elif self.cv_peak_volt_1 <= baseline_fit_1[1] and self.cv_peak_volt_1 >= baseline_fit_1[0]:
                baseline_fit_1_x1 = baseline_fit_1[0]
                baseline_fit_1_x2 = baseline_fit_1[1]
            baseline_fit_1_y1 = self.jp_1_poly1d(baseline_fit_1_x1)
            baseline_fit_1_y2 = self.jp_1_poly1d(baseline_fit_1_x2)
    
            baseline_fit_2 = [self.cv_chosen_volt[self.baseline_start_2],self.cv_chosen_volt[self.baseline_end_2]]
            baseline_fit_2.sort()
            if self.cv_peak_volt_2 > baseline_fit_2[1]:
                baseline_fit_2_x1 = baseline_fit_2[0]
                baseline_fit_2_x2 = self.cv_peak_volt_2
            elif self.cv_peak_volt_2 < baseline_fit_2[0]:
                baseline_fit_2_x1 = baseline_fit_2[1]
                baseline_fit_2_x2 = self.cv_peak_volt_2
            elif self.cv_peak_volt_2 <= baseline_fit_2[1] and self.cv_peak_volt_2 >= baseline_fit_2[0]:
                baseline_fit_2_x1 = baseline_fit_2[0]
                baseline_fit_2_x2 = baseline_fit_2[1]
            baseline_fit_2_y1 = self.jp_2_poly1d(baseline_fit_2_x1)
            baseline_fit_2_y2 = self.jp_2_poly1d(baseline_fit_2_x2)        
            
            # Highlight selected data for baseline fitting
            self.cv_plot_baseline_fit_1 = self.cv_plot.plot([baseline_fit_1_x1,baseline_fit_1_x2],[baseline_fit_1_y1,baseline_fit_1_y2],pen=pg.mkPen(color='white', width=1, style=QtCore.Qt.DashLine))
            self.cv_plot_baseline_fit_2 = self.cv_plot.plot([baseline_fit_2_x1,baseline_fit_2_x2],[baseline_fit_2_y1,baseline_fit_2_y2],pen=pg.mkPen(color='white', width=1, style=QtCore.Qt.DashLine))
            # Plot peak height
            self.cv_plot_peak_1 = self.cv_plot.plot([self.cv_peak_volt_1,self.cv_peak_volt_1],[self.jp_1_poly1d(self.cv_peak_volt_1),self.cv_peak_curr_1],pen=pg.mkPen(color='white', width=1, style=QtCore.Qt.DashLine))
            self.cv_plot_peak_2 = self.cv_plot.plot([self.cv_peak_volt_2,self.cv_peak_volt_2],[self.jp_2_poly1d(self.cv_peak_volt_2),self.cv_peak_curr_2],pen=pg.mkPen(color='white', width=1, style=QtCore.Qt.DashLine))
            
            self.cv_others()
 
    def cv_others(self):           
            # Plot range that search for peak
            # Can be more efficient?????
            self.cv_plot_range_1 = self.cv_plot.plot([self.cv_chosen_volt_reduce[int(self.low_range_1/10)],self.cv_chosen_volt_reduce[int(self.high_range_1/10)]],[self.cv_chosen_current_reduce[int(self.low_range_1/10)],self.cv_chosen_current_reduce[int(self.high_range_1/10)]],pen=None,symbol="|")
            self.cv_plot_range_2 = self.cv_plot.plot([self.cv_chosen_volt_reduce[int(self.low_range_2/10)],self.cv_chosen_volt_reduce[int(self.high_range_2/10)]],[self.cv_chosen_current_reduce[int(self.low_range_2/10)],self.cv_chosen_current_reduce[int(self.high_range_2/10)]],pen=None,symbol="|")
            
            # print()
            self.cv_param_concat_df[self.cv_chosen_path].loc['baseline_start_1'] = self.baseline_start_1
            self.cv_param_concat_df[self.cv_chosen_path].loc['baseline_end_1'] = self.baseline_end_1
            self.cv_param_concat_df[self.cv_chosen_path].loc['baseline_start_2'] = self.baseline_start_2
            self.cv_param_concat_df[self.cv_chosen_path].loc['baseline_end_2'] = self.baseline_end_2



# self.low_range_1, self.high_range_1
# class helloDialog(QDialog):
#     def __init__(self, parent):
#         super().__init__(parent)
#         self.setWindowTitle("hello")
#         self.setGeometry(200, 200, 300, 150)
#         layout = QVBoxLayout()
#         label = QLabel("Say Hello", self)
#         layout.addWidget(label)
#         self.setLayout(layout)
        
class TableModel(QtCore.QAbstractTableModel):
    # https://www.pythonguis.com/tutorials/qtableview-modelviews-numpy-pandas/
    def __init__(self, data):
        super(TableModel, self).__init__()
        self._data = data
    def data(self, index, role):
        if role == Qt.DisplayRole:
            value = self._data.iloc[index.row(), index.column()]
            return str(value)
    def rowCount(self, index):
        return self._data.shape[0]
    def columnCount(self, index):
        return self._data.shape[1]
    def headerData(self, section, orientation, role):
        # section is the index of the column/row.
        if role == Qt.DisplayRole:
            if orientation == Qt.Horizontal:
                return str(self._data.columns[section])
            if orientation == Qt.Vertical:
                return str(self._data.index[section])

if __name__ == '__main__':
    app = QApplication(sys.argv)
    mainWin = PySimpleEChem_main()
    mainWin.show()
    sys.exit(app.exec_())