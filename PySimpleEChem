#!/usr/bin/python3
import sys
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QSlider, QLabel, QPushButton, QFileDialog, QDialog, QHBoxLayout, QGridLayout, QComboBox, QLineEdit, QScrollArea, QTableWidget, QTableWidgetItem, QFrame, QCheckBox, QMenu, QAction, QSplitter
from PyQt5.QtCore import Qt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from function_collection import battery_xls2df, get_CV_init, find_state_seq, get_battery_eff, cy_idx_state_range, read_cv_format, get_peak_CV, search_pattern, ir_compen_func, diffusion, reaction_rate, peak_2nd_deriv, find_alpha, min_max_peak, check_val, switch_val, RDE_kou_lev, linear_fit, data_poly_inter,open_battery_data,calculate_battery, df_select_column, read_cv_versastat

class PySimpleEChem_main(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("PySimpleEChem")
        self.setGeometry(100, 100, 800, 600)

        self.central_widget = QWidget(self)
        self.setCentralWidget(self.central_widget)

        self.layout = QHBoxLayout(self.central_widget)

        self.create_widgets()
        self.cv_setup_plot()

    def create_widgets(self):
        
        self.cv_concat_list_df = pd.DataFrame()
        self.cv_concat_list_df_copy = pd.DataFrame()
        self.cv_baseline_df = pd.DataFrame()
        self.cv_lines = None
        
        self.figure, self.ax_cv = plt.subplots()
        self.canvas = FigureCanvas(self.figure)

        ##################### Create Table #####################
        self.cv_result_table = QtWidgets.QTableView()
        data = pd.DataFrame([
          [1, 9, 2],
          [1, 0, -1],
          [3, 5, 2],
          [3, 3, 2],
          [5, 8, 9],
        ], columns = ['A', 'B', 'C'])

        self.model = TableModel(data)
        self.cv_result_table.setModel(self.model)
        ########################################################
            
        self.cvaddopenbutton = QPushButton("Add/Open CV file", self)
        self.cvaddopenbutton.setMenu(self.create_cv_menu())
        
        self.cvloadbutton = QPushButton("Load CV file", self)
        self.cvchoosecombo = QComboBox(self)
        # self.cvchoosecombo.setGeometry(100, 80, 120, 30)
        self.cvchoosecombo.setFixedSize(300, 35)
        self.cvchoosecombo.setEditable(False)
        self.cvchoosecombo.setInsertPolicy(QComboBox.NoInsert)
        
        self.cvdeletebutton = QPushButton("Delete CV", self)
        # self.cvaddopenbutton.clicked.connect(self.cv_addopen_file)
        
        # self.menu_button = QPushButton('Menu')
        # self.menu_button.setMenu(self.create_menu())
        # layout.addWidget(self.menu_button)
        
        
        self.ircompenlabel = QLabel("IR compensation (ohm):")
        self.cv_ircompen_box = QLineEdit(self)
        self.elec_arealabel = QLabel("Electrode area (cm<sup>2</sup>):")
        self.cv_elec_area_box = QLineEdit(self)
        self.scan_rate_label = QLabel("Scan rate (V/s):")
        self.cv_scan_rate_box = QLineEdit(self)
        
        self.cv_trim_start = QLabel("Trim start:")
        self.cv_trim_start_slider = QSlider(Qt.Horizontal, minimum=1, maximum=10, tickInterval=1)
        self.cv_position_1_label = QLabel("Position:")
        self.cv_position_trim_start_box = QLineEdit(self)
        self.cv_position_trim_start_box.setFixedSize(80, 30)
        
        self.cv_trim_end = QLabel("Trim end:")
        self.cv_trim_end_slider = QSlider(Qt.Horizontal, minimum=1, maximum=10, tickInterval=1)
        self.cv_position_2_label = QLabel("Position:")
        self.cv_position_trim_end_box = QLineEdit(self)
        self.cv_position_trim_end_box.setFixedSize(80, 30)
        
        self.cv_baseline_1_start = QLabel("Start 1:")
        self.cv_baseline_1_start_slider = QSlider(Qt.Horizontal, minimum=1, maximum=10, tickInterval=1)
        self.cv_position_3_label = QLabel("Position:")
        self.cv_position_baseline_1_start_box = QLineEdit(self)
        self.cv_position_baseline_1_start_box.setFixedSize(80, 30)
        
        self.cv_baseline_1_end = QLabel("End 1:")
        self.cv_baseline_1_end_slider = QSlider(Qt.Horizontal, minimum=1, maximum=10, tickInterval=1)
        self.cv_position_4_label = QLabel("Position:")
        self.cv_position_baseline_1_end_box = QLineEdit(self)
        self.cv_position_baseline_1_end_box.setFixedSize(80, 30)
        
        self.cv_baseline_2_start = QLabel("Start 2:")
        self.cv_baseline_2_start_slider = QSlider(Qt.Horizontal, minimum=1, maximum=10, tickInterval=1)
        self.cv_position_5_label = QLabel("Position:")
        self.cv_position_baseline_2_start_box = QLineEdit(self)
        self.cv_position_baseline_2_start_box.setFixedSize(80, 30)
        
        self.cv_baseline_2_end = QLabel("End 2:")
        self.cv_baseline_2_end_slider = QSlider(Qt.Horizontal, minimum=1, maximum=10, tickInterval=1)
        self.cv_position_6_label = QLabel("Position:")
        self.cv_position_baseline_2_end_box = QLineEdit(self)
        self.cv_position_baseline_2_end_box.setFixedSize(80, 30)
        
        self.cv_peak_search_range_label = QLabel("Peak search range:")
        self.cv_peak_search_slider = QSlider(Qt.Horizontal, minimum=1, maximum=10, tickInterval=1)
        self.cv_position_7_label = QLabel("Position:")
        self.cv_position_search_range_box = QLineEdit(self) 
        self.cv_position_search_range_box.setFixedSize(80, 30)
        
        self.cv_peak_position_1_label = QLabel("Peak position 1:")
        self.cv_peak_position_1_slider = QSlider(Qt.Horizontal, minimum=1, maximum=10, tickInterval=1)
        self.cv_position_8_label = QLabel("Position:")
        self.cv_position_peak_1_box = QLineEdit(self) 
        self.cv_position_peak_1_box.setFixedSize(80, 30)
        
        self.cv_peak_position_2_label = QLabel("Peak position 2:")
        self.cv_peak_position_2_slider = QSlider(Qt.Horizontal, minimum=1, maximum=10, tickInterval=1)
        self.cv_position_9_label = QLabel("Position:")
        self.cv_position_peak_2_box = QLineEdit(self)
        self.cv_position_peak_2_box.setFixedSize(80, 30)

        self.nicholson_position_box = QLineEdit(self) 
        self.nicholson_position_box.setFixedSize(80, 30)
        self.cv_nicholson_frame = QFrame(self)
        self.cv_nicholson_frame.setFrameShape(QFrame.Box)  # Set the frame shape to Box for a rectangular frame
        self.cv_nicholson_frame.setLineWidth(1)  # Set the width of the frame lines
        
        self.cv_result_frame = QFrame(self)
        self.cv_result_frame.setFrameShape(QFrame.Box)
        self.cv_result_frame.setLineWidth(1) 
        
        cv_left_layout_splitter = QSplitter(Qt.Vertical)
        cv_left_layout_splitter.addWidget(self.canvas)
        cv_left_layout_splitter.addWidget(self.cv_result_table)
        left_layout = QGridLayout()
        self.layout.addLayout(left_layout, stretch=2)
        left_layout.addWidget(cv_left_layout_splitter) # Add the splitter to the layout

        # Add Nicholson Frame
        right_nicholson_frame = QVBoxLayout(self.cv_nicholson_frame)
        cv_nicholson_slider_layout = QHBoxLayout()
        self.nicholson_checkbox = QCheckBox("Nicholson method (if baseline cannot be determine)")
        self.switch_potential_label = QLabel("Switching potential current (jps0)")
        self.nicholson_slider = QSlider(Qt.Horizontal, minimum=1, maximum=10, tickInterval=1)
        self.nicholson_position_label = QLabel("Position:")
        right_nicholson_frame.addWidget(self.nicholson_checkbox)     
        right_nicholson_frame.addLayout(cv_nicholson_slider_layout)              
        cv_nicholson_slider_layout.addWidget(self.switch_potential_label)
        cv_nicholson_slider_layout.addWidget(self.nicholson_slider)
        cv_nicholson_slider_layout.addWidget(self.nicholson_position_label)
        cv_nicholson_slider_layout.addWidget(self.nicholson_position_box)
        
        # Add result frame
        right_result_frame = QVBoxLayout(self.cv_result_frame)
        cv_result_layout = QHBoxLayout()
        self.cv_bulk_conc = QLabel("Bulk concentration")
        self.cv_bulk_conc_unit = QLabel("mol/cm<sup>2</sup>")
        self.nicholson_slider = QSlider(Qt.Horizontal, minimum=1, maximum=10, tickInterval=1)  
        right_result_frame.addLayout(cv_result_layout)              
        cv_result_layout.addWidget(self.cv_bulk_conc)
        cv_result_layout.addWidget(self.cv_bulk_conc_unit)
        
        # Create layout for CV right side
        right_layout = QVBoxLayout()
        self.layout.addLayout(right_layout, stretch=1)
        right_1 = QHBoxLayout()
        right_2 = QHBoxLayout()
        right_3 = QHBoxLayout()
        right_4 = QHBoxLayout()
        right_5 = QHBoxLayout()
        right_6 = QHBoxLayout()
        right_7 = QHBoxLayout()
        right_8 = QHBoxLayout()
        right_9 = QHBoxLayout()
        right_10 = QHBoxLayout()
        right_11 = QHBoxLayout()
        right_12 = QHBoxLayout()
        right_13 = QHBoxLayout()
        
        right_layout.addLayout(right_1)
        right_layout.addLayout(right_2)
        right_layout.addLayout(right_3)
        right_layout.addLayout(right_4) 
        right_layout.addLayout(right_5) 
        right_layout.addLayout(right_6) 
        right_layout.addLayout(right_7) 
        right_layout.addLayout(right_8)
        right_layout.addLayout(right_9)
        right_layout.addLayout(right_10)
        right_layout.addLayout(right_11)
        right_layout.addLayout(right_12,stretch=1)
        right_layout.addLayout(right_13,stretch=1)
        
        right_1.addWidget(self.cvaddopenbutton)
        right_1.addWidget(self.cvloadbutton)
        right_1.addWidget(self.cvchoosecombo)
        right_1.addWidget(self.cvdeletebutton)
        
        right_2.addWidget(self.ircompenlabel)
        right_2.addWidget(self.cv_ircompen_box)
        right_2.addWidget(self.elec_arealabel)
        right_2.addWidget(self.cv_elec_area_box)
        right_2.addWidget(self.scan_rate_label)
        right_2.addWidget(self.cv_scan_rate_box)
        
        right_3.addWidget(self.cv_trim_start)
        right_3.addWidget(self.cv_trim_start_slider)
        right_3.addWidget(self.cv_position_1_label)
        right_3.addWidget(self.cv_position_trim_start_box)
        
        right_4.addWidget(self.cv_trim_end)
        right_4.addWidget(self.cv_trim_end_slider)
        right_4.addWidget(self.cv_position_2_label)
        right_4.addWidget(self.cv_position_trim_end_box)

        right_5.addWidget(self.cv_baseline_1_start)
        right_5.addWidget(self.cv_baseline_1_start_slider)
        right_5.addWidget(self.cv_position_3_label)
        right_5.addWidget(self.cv_position_baseline_1_start_box)
        
        right_6.addWidget(self.cv_baseline_1_end)
        right_6.addWidget(self.cv_baseline_1_end_slider)  
        right_6.addWidget(self.cv_position_4_label)
        right_6.addWidget(self.cv_position_baseline_1_end_box)
        
        right_7.addWidget(self.cv_baseline_2_start)
        right_7.addWidget(self.cv_baseline_2_start_slider)
        right_7.addWidget(self.cv_position_5_label)
        right_7.addWidget(self.cv_position_baseline_2_start_box)
        
        right_8.addWidget(self.cv_baseline_2_end)
        right_8.addWidget(self.cv_baseline_2_end_slider)    
        right_8.addWidget(self.cv_position_6_label)
        right_8.addWidget(self.cv_position_baseline_2_end_box)
        
        right_9.addWidget(self.cv_peak_search_range_label)
        right_9.addWidget(self.cv_peak_search_slider)
        right_9.addWidget(self.cv_position_7_label)
        right_9.addWidget(self.cv_position_search_range_box)
        
        right_10.addWidget(self.cv_peak_position_1_label)
        right_10.addWidget(self.cv_peak_position_1_slider)
        right_10.addWidget(self.cv_position_8_label)
        right_10.addWidget(self.cv_position_peak_1_box)   
        
        right_11.addWidget(self.cv_peak_position_2_label)
        right_11.addWidget(self.cv_peak_position_2_slider)
        right_11.addWidget(self.cv_position_9_label)
        right_11.addWidget(self.cv_position_peak_2_box) 

        right_12.addWidget(self.cv_nicholson_frame)
        right_13.addWidget(self.cv_result_frame)
        
        
     
        right_layout.setAlignment(Qt.AlignTop)   
        self.cv_ircompen_box.textChanged.connect(self.cv_edit_param)
        self.cv_elec_area_box.textChanged.connect(self.cv_edit_param)
        self.cv_scan_rate_box.textChanged.connect(self.cv_edit_param)
        
        # self.cv_elec_area_box.textChanged.connect(self.get_ircompen_df)
        self.cvchoosecombo.currentIndexChanged.connect(self.cv_choose_cv)
        # self.cvaddopenbutton.clicked.connect(self.show_hello_window)
        # Connect sliders to plot update
        # self.freq_slider.valueChanged.connect(self.cv_draw_plot)
        # self.amp_slider.valueChanged.connect(self.cv_draw_plot)

    def cv_edit_param(self):
        self.cv_chosen_ircompen = float(1)
        self.cv_chosen_elec_area = float(1)
        self.cv_chosen_scan_rate = float(0)
        try:
            self.cv_param_concat_df[self.cv_chosen].loc['ir_compensation'] = float(self.cv_ircompen_box.text())
            self.cv_chosen_ircompen = self.cv_param_concat_df[self.cv_chosen].loc['ir_compensation']
        except ValueError: 
            self.cv_chosen_ircompen = float(1)

        try:
            self.cv_param_concat_df[self.cv_chosen].loc['elec_area'] = float(self.cv_elec_area_box.text())
            self.cv_chosen_elec_area = self.cv_param_concat_df[self.cv_chosen].loc['elec_area']
        except ValueError: 
            self.cv_chosen_elec_area = float(1)
   
        try:
            self.cv_param_concat_df[self.cv_chosen].loc['scan_rate'] = float(self.cv_scan_rate_box.text())
            self.cv_chosen_scan_rate = self.cv_param_concat_df[self.cv_chosen].loc['scan_rate']
        except ValueError: 
            self.cv_chosen_scan_rate = float(0)
        
        print(self.cv_chosen_ircompen,self.cv_chosen_elec_area,self.cv_chosen_scan_rate)

    def cv_setup_plot(self):
        self.ax_cv.set_xlabel("Voltage",fontsize=14)
        self.ax_cv.set_ylabel("Current density",fontsize=14)
        self.canvas.draw()

    # def cv_plot_baseline(self):
    #     cv_bl_anodic, = self.ax_cv.plot(volt_compen_cv[jpa_lns:jpa_lne],cv_curr_den[jpa_lns:jpa_lne],linewidth=2,linestyle='-', color='red')

    def show_hello_window(self):
        hello_dialog = helloDialog(self)
        hello_dialog.exec_()
            
    def create_cv_menu(self):
        cv_addload_menu = QMenu(self)
        cv_par_action = QAction('VersaSTAT(.par)', self)
        cv_par_action.triggered.connect(lambda: self.cv_open_file('.par'))
        cv_cor_action = QAction('CorrWare(.cor)', self)
        cv_cor_action.triggered.connect(lambda: self.cv_open_file('.cor'))
        cv_csv_action = QAction('Comma-separated values(.csv)', self)
        cv_csv_action.triggered.connect(lambda: self.cv_open_file('.csv'))
        cv_txt_action = QAction('Text(.txt)', self)
        cv_txt_action.triggered.connect(lambda: self.cv_open_file('.txt'))
        cv_biologic_action = QAction('Biologic(.txt)', self)
        cv_biologic_action.triggered.connect(lambda: self.cv_open_file('.txt'))
        cv_addload_menu.addAction(cv_par_action)
        cv_addload_menu.addAction(cv_cor_action)
        cv_addload_menu.addAction(cv_csv_action)
        cv_addload_menu.addAction(cv_txt_action)
        cv_addload_menu.addAction(cv_biologic_action)
        return cv_addload_menu
  
    def get_ircompen_df(self,cv_concat_list_df_copy):
        # self.cv_concat_list_df_copy = self.cv_append_df.copy() #Create a copy for ir compensation df
        try:
            cv_ircompen_val = float(self.cv_ircompen_box.text())
        except ValueError:
            cv_ircompen_val = float(0)  
        try:
            elec_area_val = float(self.cv_elec_area_box.text())
        except ValueError:
            elec_area_val = float(1)
            
        for i in range(int(self.cv_concat_list_df_copy.shape[1]/2)):
            self.cv_concat_list_df_copy.iloc[:,i*2] = cv_ircompen_val*self.cv_concat_list_df_copy.iloc[:,i*2+1]+self.cv_concat_list_df_copy.iloc[:,i*2]
            self.cv_concat_list_df_copy.iloc[:,i*2+1] = self.cv_concat_list_df_copy.iloc[:,i*2+1]/elec_area_val #current
        self.cv_draw_plot(self.cv_concat_list_df_copy)
        # return self.cv_concat_list_df_copy
  
    def cv_open_file(self, cv_file_type):
        if cv_file_type == ".par":
            cv_file_format = "VersaSTAT"
        elif cv_file_type == ".cor":
            cv_file_format = "CorrWare"
        elif cv_file_type == ".csv":
            cv_file_format = "CorrWare"
        elif cv_file_type == ".txt": # TODO
            if self.sender() == self.cv_txt_action:
                cv_file_format = "text"
            elif self.sender() == self.cv_biologic_action:
                cv_file_format = "biologic"
        file_dialog = QFileDialog()
        file_dialog.setNameFilter(f'{cv_file_type} Files (*{cv_file_type})')
        cv_file_path, _ = file_dialog.getOpenFileNames(self, "Open File", "", f'{cv_file_type} Files (*{cv_file_type})')
        if cv_file_path:
            self.cv_concat_df,self.cv_param_concat_df = read_cv_format(cv_file_path,cv_file_format)   
            self.cv_concat_list_df = pd.concat([self.cv_concat_list_df,self.cv_concat_df],axis=1)
            self.cv_concat_list_df_copy = pd.concat([self.cv_concat_list_df_copy,self.cv_concat_df],axis=1)
            
            print(self.cv_concat_df.to_string())
            print(self.cv_param_concat_df)
            
            self.cv_ircompen_list_df = self.get_ircompen_df(self.cv_concat_list_df_copy)
            # print(self.cv_param_df)
            self.cvchoosecombo.clear()
            self.cvchoosecombo.addItems(self.cv_param_concat_df.columns.astype(str).tolist()) #Update cv combo box
    
    def cv_draw_plot(self,cv_concat_list_df_copy):
        self.cv_lines.remove() if self.cv_lines is not None else None
        for i in range(int(self.cv_concat_list_df_copy.shape[1]/2)):
            self.cv_lines, = self.ax_cv.plot(self.cv_concat_list_df_copy.iloc[:,i*2],self.cv_concat_list_df_copy.iloc[:,(i*2)+1],linestyle="-",color="black",linewidth=0.8) 
        max_volt = []
        min_volt = []
        for column in self.cv_concat_list_df_copy.columns:
            if column.endswith('volt'):
                max_volt.append(max(self.cv_concat_list_df_copy[column]))
                min_volt.append(min(self.cv_concat_list_df_copy[column]))
        self.ax_cv.set_xlim(min(min_volt),max(max_volt))
        self.canvas.draw()
        
    def cv_choose_cv(self):
        self.cv_chosen = self.cvchoosecombo.currentText()
        print(self.cv_chosen,"I chose this file")
        # self.cv_marker_plot()
        
    def cv_marker_plot(self):
        # self.cv_param_df.columns = self.cv_param_df.loc['file_name'].astype(str).tolist()
        # print(self.cv_param_df)
        # row = self.cv_param_df.loc['file_name'] == 'example_CV_1.par'
        # print(row)
        # row = self.cv_param_df.loc['start_bl_ano'].astype(str).tolist()
        # print(row)
        # start_bl_ano_value = row['start_bl_ano'].values[0]
        # print(start_bl_ano_value)
        # start_bl_ano_idx = self.cv_param_df
        
        self.bl_ano_volt =  self.cv_concat_df[str(self.cv_chosen)+' volt']
        self.bl_ano_curr =  self.cv_concat_df[str(self.cv_chosen)+' current']
        self.ax_cv.plot(self.bl_ano_volt,self.bl_ano_curr,linewidth=2,color='red')
        self.canvas.draw()   
    

class helloDialog(QDialog):
    def __init__(self, parent):
        super().__init__(parent)
        self.setWindowTitle("hello")
        self.setGeometry(200, 200, 300, 150)
        layout = QVBoxLayout()
        label = QLabel("Say Hello", self)
        layout.addWidget(label)
        self.setLayout(layout)
        
class TableModel(QtCore.QAbstractTableModel):
    # https://www.pythonguis.com/tutorials/qtableview-modelviews-numpy-pandas/
    def __init__(self, data):
        super(TableModel, self).__init__()
        self._data = data
    def data(self, index, role):
        if role == Qt.DisplayRole:
            value = self._data.iloc[index.row(), index.column()]
            return str(value)
    def rowCount(self, index):
        return self._data.shape[0]
    def columnCount(self, index):
        return self._data.shape[1]
    def headerData(self, section, orientation, role):
        # section is the index of the column/row.
        if role == Qt.DisplayRole:
            if orientation == Qt.Horizontal:
                return str(self._data.columns[section])
            if orientation == Qt.Vertical:
                return str(self._data.index[section])

if __name__ == '__main__':
    app = QApplication(sys.argv)
    mainWin = PySimpleEChem_main()
    mainWin.show()
    sys.exit(app.exec_())